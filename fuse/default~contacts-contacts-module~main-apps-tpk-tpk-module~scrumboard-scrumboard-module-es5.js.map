{"version":3,"sources":["webpack:///./src/app/concomsis/jmy/utilidades.ts","webpack:///./src/app/main/apps/contacts/contact.model.ts","webpack:///./src/app/main/apps/contacts/contacts.service.ts"],"names":[],"mappings":"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","file":"default~contacts-contacts-module~main-apps-tpk-tpk-module~scrumboard-scrumboard-module-es5.js","sourcesContent":["export function ValidateEmail(mail:string){\r\n    if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(mail))\r\n        return (true)\r\n\r\n    return (false)\r\n}\r\nexport function ValidateAt(mail:string){\r\n    if (/^\\w+([\\.-]?\\w+)*@/.test(mail))\r\n        return (true)\r\n\r\n    return (false)\r\n}\r\n\r\nexport function sumar (va:number,vb:number):number { \r\n        return va+vb;\r\n    }\r\n\r\n    \r\n\r\nexport function restar (va:number,vb:number):number { \r\n    return (va>vb)?va-vb:vb-va;\r\n}","import { FuseUtils } from '@fuse/utils';\n\nexport class Contact\n{\n    id: string;\n    name: string;\n    lastName: string;\n    avatar: string;\n    nickname: string;\n    company: string;\n    jobTitle: string;\n    email: string;\n    phone: string;\n    address: string;\n    birthday: string;\n    notes: string;\n\n    /**\n     * Constructor\n     *\n     * @param contact\n     */\n    constructor(contact)\n    {\n        {\n            this.id = contact.id || FuseUtils.generateGUID();\n            this.name = contact.name || '';\n            this.lastName = contact.lastName || '';\n            this.avatar = contact.avatar || 'assets/images/avatars/profile.jpg';\n            this.nickname = contact.nickname || '';\n            this.company = contact.company || '';\n            this.jobTitle = contact.jobTitle || '';\n            this.email = contact.email || '';\n            this.phone = contact.phone || '';\n            this.address = contact.address || '';\n            this.birthday = contact.birthday || '';\n            this.notes = contact.notes || '';\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, Resolve, RouterStateSnapshot } from '@angular/router';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\n\nimport { FuseUtils } from '@fuse/utils';\n\nimport { Contact } from 'app/main/apps/contacts/contact.model';\nimport { JmyService } from '../../../concomsis/jmy/jmy.service';\nimport { ValidateEmail,ValidateAt } from '../../../concomsis/jmy/utilidades';\nimport { ContactosListMinInterface , infoPerfilInterface } from '../../../concomsis/jmy/interfaces/services';\nimport { FormGroup } from '@angular/forms';\n\n@Injectable()\nexport class ContactsService implements Resolve<any>\n{\n    onContactsChanged: BehaviorSubject<any>;\n    onSelectedContactsChanged: BehaviorSubject<any>;\n    onUserDataChanged: BehaviorSubject<any>;\n    onSearchTextChanged: Subject<any>;\n    onFilterChanged: Subject<any>;\n    t:any;\n    contacts: Contact[];\n    newContact:  BehaviorSubject<ContactosListMinInterface[]>;\n    user: any;\n    selectedContacts: string[] = [];\n\n    searchText: string;\n    filterBy: string;\n    validateEmail=ValidateEmail;\n    validateAt=ValidateAt;\n    /**\n     * Constructor\n     *\n     * @param {HttpClient} _httpClient\n     */\n    constructor(\n        private _httpClient: HttpClient,\n        private jmyService: JmyService\n    )\n    {\n        // Set the defaults\n        this.onContactsChanged = new BehaviorSubject([]);\n        this.onSelectedContactsChanged = new BehaviorSubject([]);\n        this.onUserDataChanged = new BehaviorSubject([]);\n        this.newContact = new BehaviorSubject([]);\n        this.onSearchTextChanged = new Subject();\n        this.onFilterChanged = new Subject();\n        this.contacts =[]\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Resolver\n     *\n     * @param {ActivatedRouteSnapshot} route\n     * @param {RouterStateSnapshot} state\n     * @returns {Observable<any> | Promise<any> | any}\n     */\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any\n    {\n        return new Promise((resolve, reject) => {\n\n            Promise.all([\n                this.getContacts(),\n                this.getUserData()\n            ]).then(\n                ([files]) => {\n\n                    this.onSearchTextChanged.subscribe(searchText => {\n                        this.searchText = searchText;\n                        this.getContacts();\n                    });\n\n                    this.onFilterChanged.subscribe(filter => {\n                        this.filterBy = filter;\n                        this.getContacts();\n                    });\n\n                    resolve();\n\n                },\n                reject\n            );\n        });\n    }\n    public saveNewContact(d:any){\n        console.log(this.jmyService.jmyPerfil.rutaPrivada);\n        \n        this.jmyService.dbRealTime.object(this.jmyService.jmyPerfil.rutaPrivada+'contactos/lista/'+d.id).set(d).then(()=>{\n            console.log('Nuevo contacto agregado',this.searchText);\n            this.searchText='';\n        });\n    }\n    public guardarECard(d:infoPerfilInterface){\n        console.log(d,this.jmyService.jmyPerfil.rutaPrivada,this.jmyService.jmyPerfil.perfil);\n        if(this.jmyService.jmyPerfil.perfil.uid!=''){\n            this.jmyService.jmyPerfil.actualizarPerfil(d).then(r=>{\n                console.log('eCard Actualizado',d,r);\n            })\n        }else{\n            console.error('no hay sessión');\n        }\n    }\n    public getNewContact(): any {\n        const studentsObservable = new Observable(observer => {\n               setTimeout(() => {\n                   console.log(this.newContact);\n                   \n                   observer.next(this.newContact);\n               }, 1000);\n        });\n   \n        return studentsObservable;\n    }\n    /**\n     * Get contacts\n     *\n     * @returns {Promise<any>}\n     */\n    getContacts(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n                //this._httpClient.get('api/contacts-contacts')\n                let tBus:string='';\n                console.log(this.jmyService.jmyPerfil.rutaPrivada+'contactos/lista/');\n                \n                    const contactos:any = this.jmyService.dbRealTime.object(this.jmyService.jmyPerfil.rutaPrivada+'contactos/lista/').valueChanges();\n                    contactos.subscribe(response=>{\n                        const fn=(rdb:any)=>{\n                            const t:any=[];\n                            if(typeof rdb==\"object\")\n                              Object.keys(rdb).forEach(e => {\n                                t.push(rdb[e]);\n                              });\n                            return t;\n                          }\n                        this.contacts  =(response!=undefined)?fn(response):this.contacts;\n                        console.log(this.contacts,response );\n\n                        if ( this.filterBy === 'starred' )\n                        {\n                            this.contacts = this.contacts.filter(_contact => {\n                                return this.user.starred.includes(_contact.id);\n                            });\n                        }\n\n                        if ( this.filterBy === 'frequent' )\n                        {\n                            this.contacts = this.contacts.filter(_contact => {\n                                return this.user.frequentContacts.includes(_contact.id);\n                            });\n                        }\n\n                        if ( this.searchText && this.searchText !== '' )\n                        {\n                            \n                            this.contacts = FuseUtils.filterArrayByString(this.contacts, this.searchText);\n                            console.log(this.searchText);\n                            if(this.searchText.length>4){\n                                tBus=(this.validateAt(this.searchText))?'email':'displayName';\n                                this.jmyService.dbRealTime.list(this.jmyService.jmyPerfil.rutaPublica+'lista/',ref=>ref.orderByChild(tBus).startAt(this.searchText).endAt(this.searchText+'\\uf8ff')).valueChanges().subscribe(r=>{\n                                console.log(r);\n                                \n                                    let tm=[];\n                                    r.forEach(e => {\n                                    tm.push({\n                                            photoURL:e['photoURL'],\n                                            email:e['email'],\n                                            uid:e['uid'],\n                                            displayName:e['displayName'],\n                                        });\n                                    });\n                                    this.newContact.next(tm);\n                                    console.log(r,this.newContact );\n                                    \n                                });\n                            }\n                        }else{\n                            this.newContact.next([]);\n                        }\n\n                        this.contacts = this.contacts.map(contact => {\n                            return new Contact(contact);\n                        });\n                        \n                        this.onContactsChanged.next(this.contacts);\n                        resolve(this.contacts);\n                    }, reject);\n            }\n                \n              \n        );\n    }\n\n    /**\n     * Get user data\n     *\n     * @returns {Promise<any>}\n     */\n    getUserData(): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n                this._httpClient.get('api/contacts-user/5725a6802d10e277a0f35724')\n                    .subscribe((response: any) => {\n                        this.user = response;\n                        this.onUserDataChanged.next(this.user);\n                        resolve(this.user);\n                    }, reject);\n            }\n        );\n    }\n\n    /**\n     * Toggle selected contact by id\n     *\n     * @param id\n     */\n    toggleSelectedContact(id): void\n    {\n        // First, check if we already have that contact as selected...\n        if ( this.selectedContacts.length > 0 )\n        {\n            const index = this.selectedContacts.indexOf(id);\n\n            if ( index !== -1 )\n            {\n                this.selectedContacts.splice(index, 1);\n\n                // Trigger the next event\n                this.onSelectedContactsChanged.next(this.selectedContacts);\n\n                // Return\n                return;\n            }\n        }\n\n        // If we don't have it, push as selected\n        this.selectedContacts.push(id);\n\n        // Trigger the next event\n        this.onSelectedContactsChanged.next(this.selectedContacts);\n    }\n\n    /**\n     * Toggle select all\n     */\n    toggleSelectAll(): void\n    {\n        if ( this.selectedContacts.length > 0 )\n        {\n            this.deselectContacts();\n        }\n        else\n        {\n            this.selectContacts();\n        }\n    }\n\n    /**\n     * Select contacts\n     *\n     * @param filterParameter\n     * @param filterValue\n     */\n    selectContacts(filterParameter?, filterValue?): void\n    {\n        this.selectedContacts = [];\n\n        // If there is no filter, select all contacts\n        if ( filterParameter === undefined || filterValue === undefined )\n        {\n            this.selectedContacts = [];\n            this.contacts.map(contact => {\n                this.selectedContacts.push(contact.id);\n            });\n        }\n\n        // Trigger the next event\n        this.onSelectedContactsChanged.next(this.selectedContacts);\n    }\n\n    /**\n     * Update contact\n     *\n     * @param contact\n     * @returns {Promise<any>}\n     */\n    updateContact(contact): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            console.log(contact);\n            const q=this.jmyService.dbRealTime.object(this.jmyService.jmyPerfil.rutaPrivada+'contactos/lista/'+contact.id)\n            q.set(contact).then(()=>{\n                console.log('Contacto Actualizado');                \n            });\n\n            this.getContacts();\n            resolve();\n\n        });\n    }\n\n    /**\n     * Update user data\n     *\n     * @param userData\n     * @returns {Promise<any>}\n     */\n    updateUserData(userData): Promise<any>\n    {\n        return new Promise((resolve, reject) => {\n            this._httpClient.post('api/contacts-user/' + this.user.id, {...userData})\n                .subscribe(response => {\n                    this.getUserData();\n                    this.getContacts();\n                    resolve(response);\n                });\n        });\n    }\n\n    /**\n     * Deselect contacts\n     */\n    deselectContacts(): void\n    {\n        this.selectedContacts = [];\n\n        // Trigger the next event\n        this.onSelectedContactsChanged.next(this.selectedContacts);\n    }\n\n    /**\n     * Delete contact\n     *\n     * @param contact\n     */\n    deleteContact(contact): void\n    {\n        console.log(contact);\n        \n        const contactIndex = this.contacts.indexOf(contact);\n        this.contacts.splice(contactIndex, 1);\n        this.onContactsChanged.next(this.contacts);\n\n        this.jmyService.dbRealTime.object(this.jmyService.jmyPerfil.rutaPrivada+'contactos/lista/'+contact.id).remove().then(()=>{  console.log('del',contact.id);\n       });\n    }\n\n    /**\n     * Delete selected contacts\n     */\n    deleteSelectedContacts(): void\n    {\n        for ( const contactId of this.selectedContacts )\n        {\n          \n            this.jmyService.dbRealTime.object(this.jmyService.jmyPerfil.rutaPrivada+'contactos/lista/'+contactId).remove().then(()=>{  console.log('del',contactId);\n            });\n            const contact = this.contacts.find(_contact => {\n                return _contact.id === contactId;\n            });\n            const contactIndex = this.contacts.indexOf(contact);\n            this.contacts.splice(contactIndex, 1);\n        }\n        this.onContactsChanged.next(this.contacts);\n        this.deselectContacts();\n    }\n\n}\n"],"sourceRoot":""}